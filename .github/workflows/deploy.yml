name: Vietnam Provinces API CI/CD

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: vietnamese-provinces-api
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PORT: ${{ secrets.VPS_PORT || 22 }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'docker.io' }}
  CONTAINER_PORT: ${{ secrets.CONTAINER_PORT || 8080 }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/master'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/vietnamese-provinces-api:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/vietnamese-provinces-api:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            NETWORK_NAME="npm_network"
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/vietnamese-provinces-api:latest

            # Stop and remove old container if exists
            docker stop ${{ env.DOCKER_IMAGE_NAME }} || true
            docker rm ${{ env.DOCKER_IMAGE_NAME }} || true

            # Run new container with environment variables from GitHub Secrets
            docker run -d \
              --name ${{ env.DOCKER_IMAGE_NAME }} \
              --restart unless-stopped \
              -p ${{ env.CONTAINER_PORT }}:8080 \
              --network $NETWORK_NAME \
              -e NODE_ENV=production \
              -e DATABASE_URL='${{ secrets.PROD_DATABASE_URL }}' \
              -e DB_USER='${{ secrets.PROD_DB_USER }}' \
              -e DB_PASSWORD='${{ secrets.PROD_DB_PASSWORD }}' \
              -e DB_NAME='${{ secrets.PROD_DB_NAME }}' \
              ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

            # Clean up unused images
            docker image prune -af
